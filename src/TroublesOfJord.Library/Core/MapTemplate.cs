using System;
using System.Collections.Generic;
using TroublesOfJord.Utils;

namespace TroublesOfJord.Core
{
	public class MapTemplate: BaseObject
	{
		public string GeneratorId;

		public List<Exit> Exits { get; } = new List<Exit>();
		public Dictionary<string, int> Creatures { get; } = new Dictionary<string, int>();

		public Map Generate()
		{
			var generator = TJ.Module.EnsureGenerator(GeneratorId);

			var map = generator.Generate();

			var freeTiles = new List<Tile>();
			for (var x = 0; x < map.Size.X; ++x)
			{
				for (var y = 0; y < map.Size.Y; ++y)
				{
					var tile = map[x, y];
					if (tile.Info.Passable && tile.Creature == null)
					{
						freeTiles.Add(tile);
					}
				}
			}

			if (freeTiles.Count == 0)
			{
				throw new Exception(string.Format("Could not find free tile at map generated by generator '{0}'", GeneratorId));
			}

			// Add exits
			foreach (var exit in Exits)
			{
				var index = MathUtils.Random.Next(0, freeTiles.Count);
				var exitTile = freeTiles[index];
				freeTiles.RemoveAt(index);

				exitTile.Info = TJ.Module.EnsureTileInfo(exit.TileInfoId);
				exitTile.Exit = exit;
			}

			// Add creatures
			foreach(var pair in Creatures)
			{
				var creatureInfo = TJ.Module.EnsureCreatureInfo(pair.Key);
				for(var i = 0; i < pair.Value; ++i)
				{
					if (freeTiles.Count == 0)
					{
						break;
					}

					var npc = new NonPlayer(creatureInfo);

					var index = MathUtils.Random.Next(0, freeTiles.Count);
					var tile = freeTiles[index];
					freeTiles.RemoveAt(index);

					npc.Place(map, tile.Position);
				}
			}

			return map;
		}
	}
}
