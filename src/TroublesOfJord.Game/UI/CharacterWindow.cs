/* Generated by MyraPad at 07.08.2020 10:50:37 */
using Microsoft.Xna.Framework;
using Myra.Graphics2D.UI;

namespace TroublesOfJord.UI
{
	public partial class CharacterWindow
	{
		public CharacterWindow()
		{
			BuildUI();

			var player = TJ.Player;
			_labelDescription.Text = string.Format("{0}, {1}, {2}",
				player.Name, player.Class.Name, player.Level);

			ResetPoints();
		}

		private void ResetPoints()
		{
			_gridClasses.Widgets.Clear();

			var player = TJ.Player;

			var totalLevels = 0;
			var cnt = 0;
			foreach (var cls in TJ.Module.Classes)
			{
				var level = player.GetClassLevel(cls.Key);

				var label = new Label
				{
					Text = cls.Value.Name,
					GridRow = cnt
				};

				if (player.Class.Id == cls.Key)
				{
					label.TextColor = Color.Red;
				}

				_gridClasses.Widgets.Add(label);

				var spinButton = new SpinButton
				{
					Value = level,
					GridColumn = 1,
					GridRow = cnt,
					Width = 40,
					Minimum = level,
					Integer = true,
					Nullable = false
				};

				spinButton.ValueChanging += SpinButton_ValueChanging;
				spinButton.ValueChanged += SpinButton_ValueChanged;

				_gridClasses.Widgets.Add(spinButton);

				totalLevels += level;
				++cnt;
			}

			UpdateEnabled();
		}

		private void SpinButton_ValueChanged(object sender, Myra.Utility.ValueChangedEventArgs<float?> e)
		{
			UpdateEnabled();
		}

		private int CalculatePointsLeft()
		{
			var player = TJ.Player;

			var totalLevels = 0;
			foreach (var widget in _gridClasses.Widgets)
			{
				var asSpinButton = widget as SpinButton;
				if (asSpinButton == null)
				{
					continue;
				}

				totalLevels += (int)asSpinButton.Value;
			}

			return player.Level - totalLevels;
		}

		private void UpdateEnabled()
		{
			_labelPointsLeft.Text = Strings.ClassPointsToSpend(CalculatePointsLeft());
		}

		private void SpinButton_ValueChanging(object sender, Myra.Utility.ValueChangingEventArgs<float?> e)
		{
			// Check that the new points sum doesnt exceed player level
			var player = TJ.Player;

			var totalLevels = 0;
			foreach (var widget in _gridClasses.Widgets)
			{
				var asSpinButton = widget as SpinButton;
				if (asSpinButton == null)
				{
					continue;
				}

				if (asSpinButton != sender)
				{
					totalLevels += (int)asSpinButton.Value;
				} else if (e.NewValue != null)
				{
					totalLevels += (int)e.NewValue;
				}
			}

			var pointsLeft = player.Level - totalLevels;
			if (pointsLeft < 0)
			{
				e.Cancel = true;
				return;
			}
		}
	}
}