using System;
using System.Collections.Generic;
using Jord.Utils;

namespace Jord.Core
{
	public class Dungeon : BaseObject
	{
		private class CreatureRandom
		{
			public CreatureInfo Info;
			public float Rate;
			public float Threshold;
		}

		public string GeneratorId { get; set; }

		public string Name { get; set; }

		public int Levels { get; set; }

		public Exit Exit { get; set; }

		public string ExitDownTileInfoId { get; set; }

		public Map Generate(int level)
		{
			var generator = TJ.Database.Generators.Ensure(GeneratorId);

			var map = generator.Generate();
			map.Id = Id;
			map.Name = Name;
			map.DungeonLevel = level;

			var freeTiles = new List<Tile>();
			for (var x = 0; x < map.Width; ++x)
			{
				for (var y = 0; y < map.Height; ++y)
				{
					var tile = map[x, y];
					if (tile.Info.Passable && tile.Object == null)
					{
						freeTiles.Add(tile);
					}
				}
			}

			if (freeTiles.Count == 0)
			{
				throw new Exception(string.Format("Could not find free tile at map generated by generator '{0}'", GeneratorId));
			}

			var exit = level <= 1 ? Exit : new Exit
			{
				MapId = Id,
				TileInfoId = Exit.TileInfoId,
				DungeonLevel = level - 1
			};

			// Back exits
			var count = MathUtils.Random.Next(1, 3);
			for (var i = 0; i < count; ++i)
			{
				var index = MathUtils.Random.Next(0, freeTiles.Count);
				var exitTile = freeTiles[index];
				freeTiles.RemoveAt(index);

				exitTile.Info = TJ.Database.TileInfos.Ensure(exit.TileInfoId);
				exitTile.Exit = exit;
			}

			// Down exits
			if (level <= Levels)
			{
				exit = new Exit
				{
					MapId = Id,
					TileInfoId = ExitDownTileInfoId,
					DungeonLevel = level + 1
				};

				count = MathUtils.Random.Next(2, 5);
				for (var i = 0; i < count; ++i)
				{
					var index = MathUtils.Random.Next(0, freeTiles.Count);
					var exitTile = freeTiles[index];
					freeTiles.RemoveAt(index);

					exitTile.Info = TJ.Database.TileInfos.Ensure(exit.TileInfoId);
					exitTile.Exit = exit;
				}
			}

			// Add creatures
			var creaturesAmount = (int)Math.Sqrt(map.Width * map.Height) / 4;

			var possibleCreatures = new List<CreatureRandom>();
			var totalRate = 0.0f;
			foreach (var pair in TJ.Database.CreatureInfos)
			{
				var info = pair.Value;
				if (info.DungeonFilter != Id || info.MinimumLevel > level)
				{
					continue;
				}

				var creatureRandom = new CreatureRandom
				{
					Info = info,
					Rate = info.Occurence / (float)(level - info.MinimumLevel + 1)
				};

				totalRate += creatureRandom.Rate;

				possibleCreatures.Add(creatureRandom);
			}

			// Normalize rates
			var threshold = 0.0f;
			foreach (var cr in possibleCreatures)
			{
				cr.Rate /= totalRate;

				threshold += cr.Rate;
				cr.Threshold = threshold;
			}

			if (possibleCreatures.Count > 0)
			{
				for (var i = 0; i < creaturesAmount; ++i)
				{
					if (freeTiles.Count == 0)
					{
						break;
					}

					var rnd = (float)MathUtils.Random.NextDouble();

					// Determine creature
					CreatureRandom creatureRandom = possibleCreatures[0];
					foreach (var cr in possibleCreatures)
					{
						if (rnd < cr.Threshold)
						{
							creatureRandom = cr;
							break;
						}
					}

					var index = MathUtils.Random.Next(0, freeTiles.Count);
					var tile = freeTiles[index];
					freeTiles.RemoveAt(index);

					map.Spawns.Add(new SpawnableWithCoords(creatureRandom.Info, tile.Position));
				}
			}

			return map;
		}
	}
}
