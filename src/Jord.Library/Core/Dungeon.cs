using System;
using System.Collections.Generic;
using Jord.Utils;

namespace Jord.Core
{
	public class Dungeon: BaseObject
	{
		public string GeneratorId;

		public string Name;

		public int Levels;

		public Exit Exit;

		public string ExitDownTileInfoId;

		public Map Generate(int level)
		{
			var generator = TJ.Module.Generators.Ensure(GeneratorId);

			var map = generator.Generate();
			map.Id = Id;
			map.Name = Name;
			map.DungeonLevel = level;

			var freeTiles = new List<Tile>();
			for (var x = 0; x < map.Width; ++x)
			{
				for (var y = 0; y < map.Height; ++y)
				{
					var tile = map[x, y];
					if (tile.Info.Passable && tile.Object == null && tile.Creature == null)
					{
						freeTiles.Add(tile);
					}
				}
			}

			if (freeTiles.Count == 0)
			{
				throw new Exception(string.Format("Could not find free tile at map generated by generator '{0}'", GeneratorId));
			}

			var exit = level <= 1 ? Exit : new Exit
			{
				MapId = Id,
				TileInfoId = Exit.TileInfoId,
				DungeonLevel = level - 1
			};

			// Back exits
			var count = MathUtils.Random.Next(1, 10);
			for(var i = 0; i < count; ++i)
			{
				var index = MathUtils.Random.Next(0, freeTiles.Count);
				var exitTile = freeTiles[index];
				freeTiles.RemoveAt(index);

				exitTile.Info = TJ.Module.TileInfos.Ensure(exit.TileInfoId);
				exitTile.Exit = exit;
			}

			if (level <= Levels)
			{
				exit = new Exit
				{
					MapId = Id,
					TileInfoId = ExitDownTileInfoId,
					DungeonLevel = level + 1
				};

				count = MathUtils.Random.Next(2, 20);
				for (var i = 0; i < count; ++i)
				{
					var index = MathUtils.Random.Next(0, freeTiles.Count);
					var exitTile = freeTiles[index];
					freeTiles.RemoveAt(index);

					exitTile.Info = TJ.Module.TileInfos.Ensure(exit.TileInfoId);
					exitTile.Exit = exit;
				}
			}

			// Add creatures
			var creaturesAmount = map.Width * map.Height / 256;

			var possibleCreatures = new List<CreatureInfo>();
			foreach(var pair in TJ.Module.CreatureInfos)
			{
				if (pair.Value.DungeonFilter == Id && pair.Value.MinimumLevel <= level)
				{
					possibleCreatures.Add(pair.Value);
				}
			}

			if (possibleCreatures.Count > 0)
			{
				for (var i = 0; i < creaturesAmount; ++i)
				{
					if (freeTiles.Count == 0)
					{
						break;
					}

					var creatureInfo = possibleCreatures[MathUtils.Random.Next(0, possibleCreatures.Count)];

					var npc = new NonPlayer(creatureInfo);

					var index = MathUtils.Random.Next(0, freeTiles.Count);
					var tile = freeTiles[index];
					freeTiles.RemoveAt(index);

					npc.Place(map, tile.Position);
				}
			}

			return map;
		}
	}
}
