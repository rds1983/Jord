/* Generated by MyraPad at 10/9/2022 5:34:35 AM */
using Jord.Core;
using Jord.Loading;
using Jord.MapEditor.Generation;
using System;
using System.IO;

namespace Jord.MapEditor.UI
{
	public partial class GenerateWorldDialog
	{
		public GenerationSettings GenerationSettings
		{
			get => (GenerationSettings)_properties.Object;
			set
			{
				_properties.Object = value;
				UpdateEnabled();
			}
		}

		public GenerateWorldDialog()
		{
			BuildUI();

			UpdateEnabled();

			_properties.PropertyChanged += (s, e) => UpdateEnabled();
			_labelStatus.Text = string.Empty;
		}

		private void UpdateEnabled()
		{
			ButtonOk.Enabled = GenerationSettings != null && !string.IsNullOrEmpty(GenerationSettings.InputFile);
		}

		protected override void OnOk()
		{
			try
			{
				int width, height;
				InputTile[,] tiles;

				using (var stream = File.OpenRead(GenerationSettings.InputFile))
				using (var reader = new BinaryReader(stream))
				{
					var mapType = (MapType)reader.ReadInt32();

					width = reader.ReadInt32();
					height = reader.ReadInt32();

					tiles = new InputTile[width, height];
					for (var x = 0; x < width; ++x)
					{
						for (var y = 0; y < height; ++y)
						{
							var tile = new InputTile
							{
								HeightType = (HeightType)reader.ReadInt32(),
								HeightValue = reader.ReadSingle(),
								HeatType = (HeatType)reader.ReadInt32(),
								HeatValue = reader.ReadSingle(),
								MoistureType = (MoistureType)reader.ReadInt32(),
								MoistureValue = reader.ReadSingle()
							};

							tiles[x, y] = tile;
						}
					}

				}

				// Convert to Jord Map
				var map = new Map(width, height)
				{
					Id = "World"
				};

				for (var x = 0; x < width; ++x)
				{
					for (var y = 0; y < height; ++y)
					{
						var tileInfoId = string.Empty;
						
						var inputTile = tiles[x, y];
						switch (inputTile.HeightType)
						{
							case HeightType.DeepWater:
							case HeightType.ShallowWater:
							case HeightType.River:
								tileInfoId = "Water";
								break;
							case HeightType.Shore:
							case HeightType.Sand:
								tileInfoId = "Ground";
								break;
							case HeightType.Grass:
							case HeightType.Forest:
								tileInfoId = "Grass";
								break;
							case HeightType.Rock:
								tileInfoId = "Rock";
								break;
							case HeightType.Snow:
								tileInfoId = "Mountain";
								break;
						}

						var tileInfo = TJ.Database.TileInfos[tileInfoId];
						map[x, y].Info = tileInfo;
					}
				}

				// Save the map
				var mapData = MapLoader.SaveMapToString(map);
				var path = Path.Combine(Studio.Instance.ModulePath, "Maps/World.json");
				File.WriteAllText(path, mapData);

				base.OnOk();
			}
			catch (Exception ex)
			{
				var messageBox = CreateMessageBox("Error", ex.Message);
				messageBox.ShowModal(Desktop);
			}
		}
	}
}